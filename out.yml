AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  Stage:
    Type: String
    Description: Stage to deploy resources to
    AllowedValues:
    - staging
    - production
Conditions:
  IsProduction:
    Fn::Equals:
    - Ref: Stage
    - production
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: nodejs18.x
    MemorySize: 128
    Timeout: 5
    Tracing: Active
    Tags:
      project: my-project
      environment:
        Ref: Stage
Resources:
  ApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayLoggingRole
        - Arn
    Metadata:
      SamResourceId: ApiGwAccountConfig
  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      SamResourceId: ApiGatewayLoggingRole
  BooksApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: books-api-${Stage}
      StageName:
        Ref: Stage
      MethodSettings:
      - LoggingLevel: INFO
        ResourcePath: /*
        HttpMethod: '*'
      TracingEnabled: true
      Variables:
        LAMBDA_ALIAS:
          Ref: Stage
      Auth:
        Authorizers:
          CognitoAuth:
            UserPoolArn:
              Fn::GetAtt:
              - CognitoUserPool
              - Arn
    Metadata:
      SamResourceId: BooksApi
  GetAllBooks:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Stage}-books-get-all
      CodeUri: s3://airline-booking-stack-05042024/books-api/90f58b4e59c8acbc0b4ae12c1bf4a68c
      Handler: index.handler
      AutoPublishAlias:
        Ref: Stage
      DeploymentPreference:
        Type:
          Fn::If:
          - IsProduction
          - Linear10PercentEvery1Minute
          - AllAtOnce
        Alarms:
        - Ref: GetAllBooksAliasErrorMetricGreaterThanZeroAlarm
      Environment:
        Variables:
          TABLE:
            Ref: BooksTable
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: BooksTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /books
            Method: get
            RestApiId:
              Ref: BooksApi
    Metadata:
      SamResourceId: GetAllBooks
  CreateBook:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Stage}-books-create
      CodeUri: s3://airline-booking-stack-05042024/books-api/f0eea1e503419bb5df53e0870397e627
      Handler: index.handler
      AutoPublishAlias:
        Ref: Stage
      DeploymentPreference:
        Type:
          Fn::If:
          - IsProduction
          - Linear10PercentEvery1Minute
          - AllAtOnce
        Hooks:
          PreTraffic:
            Ref: CreateBookPreTraffic
        Alarms:
        - Ref: CreateBookAliasErrorMetricGreaterThanZeroAlarm
      Environment:
        Variables:
          TABLE:
            Ref: BooksTable
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: BooksTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /books
            Method: post
            RestApiId:
              Ref: BooksApi
            Auth:
              AuthorizationScopes:
              - email
              - Fn::If:
                - IsProduction
                - Ref: AWS::NoValue
                - aws.cognito.signin.user.admin
              Authorizer: CognitoAuth
    Metadata:
      SamResourceId: CreateBook
  BooksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: isbn
        Type: String
      TableName:
        Fn::Sub: ${Stage}-books
      Tags:
        project: my-project
        environment:
          Ref: Stage
      SSESpecification:
        SSEEnabled: true
    Metadata:
      SamResourceId: BooksTable
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${Stage}-books-api-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
      - email
      Schema:
      - AttributeDataType: String
        Name: email
        Required: false
    Metadata:
      SamResourceId: CognitoUserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
      - implicit
      AllowedOAuthScopes:
      - email
      - openid
      CallbackURLs:
      - https://aws.amazon.com/
      SupportedIdentityProviders:
      - COGNITO
      ExplicitAuthFlows:
      - ALLOW_REFRESH_TOKEN_AUTH
      - Fn::If:
        - IsProduction
        - Ref: AWS::NoValue
        - ALLOW_USER_PASSWORD_AUTH
    Metadata:
      SamResourceId: UserPoolClient
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Fn::Sub: book-api-${Stage}-${AWS::AccountId}
      UserPoolId:
        Ref: CognitoUserPool
    Metadata:
      SamResourceId: UserPoolDomain
  CreateBookPreTraffic:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: CodeDeployHook_${Stage}-books-create-pre-traffic-check
      CodeUri: s3://airline-booking-stack-05042024/books-api/d5647415bb2ae3fa414adbfdac3a9e2d
      Handler: index.handler
      Environment:
        Variables:
          TABLE:
            Ref: BooksTable
          FN_NEW_VERSION:
            Ref: CreateBook.Version
      Tags:
        project: my-project
        environment:
          Ref: Stage
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: BooksTable
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - codedeploy:PutLifecycleEventHookExecutionStatus
          Resource:
            Fn::Sub: arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
            Ref: CreateBook.Version
    Metadata:
      SamResourceId: CreateBookPreTraffic
  CreateBookAliasErrorMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: Resource
        Value:
          Fn::Sub: ${GetAllBooks}:${Stage}
      - Name: FunctionName
        Value:
          Ref: GetAllBooks
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
    Metadata:
      SamResourceId: CreateBookAliasErrorMetricGreaterThanZeroAlarm
  GetAllBooksAliasErrorMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: Resource
        Value:
          Fn::Sub: ${CreateBook}:${Stage}
      - Name: FunctionName
        Value:
          Ref: CreateBook
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
    Metadata:
      SamResourceId: GetAllBooksAliasErrorMetricGreaterThanZeroAlarm
Outputs:
  ApiEndpoint:
    Description: API endpoint
    Value:
      Fn::Sub: https://${BooksApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
  UserPoolId:
    Description: User Pool Id
    Value:
      Ref: CognitoUserPool
  UserPoolClientId:
    Description: User Pool Client Id
    Value:
      Ref: UserPoolClient
  BooksTable:
    Description: DynamoDB table where we will be storing books
    Value:
      Ref: BooksTable
